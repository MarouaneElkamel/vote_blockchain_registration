
L'intégration continue est un ensemble de pratiques utilisées en génie logiciel consistant dont le principal but est de détecter les problèmes d'intégration au plus tôt lors du développement. De plus, elle permet d'automatiser l'exécution des suites de tests et de voir l'évolution du développement du logiciel.
L'intégration continue repose souvent sur la mise en place d'une brique logicielle permettant l'automatisation de tâches : compilation, tests unitaires et fonctionnels, validation produit, tests de performances… À chaque changement du code, cette brique logicielle va exécuter un ensemble de tâches et produire un ensemble de résultats, que le développeur peut par la suite consulter. Cette intégration permet ainsi de ne pas oublier d'éléments lors de la mise en production et donc ainsi améliorer la qualité du produit3.
Pour appliquer cette technique, il faut d'abord que :
•	le code source soit partagé (en utilisant des logiciels de gestion de versions : <GIT>
•	les développeurs intègrent (commit) quotidiennement (au moins) leurs modifications ;
•	des tests d'intégration soient développés pour valider l'application <JUNIT : manquant> 
•	Un outil d'intégration continue est ensuite nécessaire, tel que Travis CI dans notre cas <Travis>. .
•	D'autres outils, comme SonarQube ont été mis en place afin de superviser la qualité du code. <Sonar>

[Wikipédia]

